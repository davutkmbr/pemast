import { tool } from "@openai/agents";
import { z } from "zod";
import { memoryService, MemoryService } from "../../services/memory.service.js";
import type { DatabaseContext, CreateMemoryInput } from "../../types/index.js";

/**
 * Tool: store_memory
 * Persists a user memory (fact, preference, note) so that it can be recalled later.
 * The agent should call this when the user explicitly asks to remember something
 * or when the message is obviously a personal preference / fact.
 */
const StoreMemoryParams = z.object({
  content: z.string().describe("Full text to remember (can be multi-sentence)."),
  summary: z
    .string()
    .max(160)
    .nullish()
    .describe("Brief summary used for retrieval; if omitted will be autogenerated."),
  tags: z
    .array(z.string())
    .nullish()
    .describe("Optional list of tags, e.g. ['food','preference']"),
});

export const storeMemoryTool = tool({
  name: "store_memory",
  description:
    "Stores a piece of user-provided information so it can be recalled later (episodic memory).",
  parameters: StoreMemoryParams,
  strict: true,
  execute: async (
    data: z.infer<typeof StoreMemoryParams>,
    context
  ) => {
    const dbCtx = (context as any)?.context as DatabaseContext | undefined;
    if (!dbCtx) {
      return "⚠️ Missing database context; cannot store memory.";
    }

    let { content, summary, tags } = data;

    // Auto-generate summary if not provided (first 100 chars)
    if (!summary) {
      summary = content.length > 100 ? content.slice(0, 97) + "…" : content;
    }

    const input: CreateMemoryInput = {
      // messageId can be omitted when the memory isn't tied to a specific message
      content,
      summary,
      ...(tags ? { tags } : {}),
    } as CreateMemoryInput;

    const id = await memoryService.createMemory(input, dbCtx);
    return `✅ Memory stored (id: ${id})`;
  },
}); 